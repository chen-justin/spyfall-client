{"version":3,"sources":["constants.ts","SocketService.ts","SpyfallContext.ts","components/CreateControls.tsx","components/GameLobby.tsx","components/JoinLobby.tsx","components/SpyfallGame.tsx","Spyfall.tsx","models/SpyfallPayload.ts","models/SpyfallRoomConfig.ts","serviceWorker.ts","index.tsx"],"names":["GameState","Locations","SpyfallEvent","SocketService","socket","this","io","id","room","desiredName","emit","JOIN","config","locations","CREATEROOM","roomName","STARTGAME","ENDGAME","LEAVE","name","CHANGENAME","fromEvent","RECEIVEPAYLOAD","disconnect","SpyfallContext","createContext","CreateControls","props","useState","displayName","setDisplayName","SP1","locationState","setLocationState","desiredDuration","setDesiredDuration","setLocations","handleFormChange","event","target","parseInt","value","className","type","placeholder","onChange","e","text","length","style","display","flexDirection","defaultChecked","SP2","BOTH","CUSTOM","min","max","onClick","locs","split","onSubmit","onGameStateChange","SPLASH","GameLobby","showCopy","setShowCopy","isEditing","setIsEditing","payload","users","userID","editedName","setEditedName","accessCode","youRow","icon","faEdit","editRow","changeName","faCheck","faBan","onAnimationEnd","copy","document","getElementById","temp","createElement","textContent","body","appendChild","select","execCommand","remove","faCopy","Object","keys","map","key","index","pRow","startGame","leaveLobby","JoinLobby","setAccessCode","setDesiredName","justifyContent","marginTop","requestBack","SpyfallGame","location","isSpy","spy","notSpy","timeBetween","Math","floor","endTime","startTime","time","setTime","endGame","setEndGame","useEffect","interval","inSession","setInterval","clearInterval","minutesRem","formattedSeconds","toString","padStart","agents","title","handleEndGame","handleLeaveGame","Spyfall","gameState","setGameState","context","useContext","roundDuration","gamePayload","setGamePayload","setUserID","init","receivePayload","subscribe","getID","console","log","INGAME","LOBBY","controls","CREATE","handleLeave","leave","lState","createRoom","locationType","join","changeUsername","Boolean","window","hostname","match","game","ReactDOM","render","Provider","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65129509.chunk.js","sourcesContent":["export enum GameState {\r\n  SPLASH,\r\n  CREATE,\r\n  JOIN,\r\n  LOBBY,\r\n  INGAME\r\n}\r\n\r\nexport enum Locations {\r\n  SP1,\r\n  SP2,\r\n  BOTH,\r\n  CUSTOM\r\n}\r\n\r\nexport enum SpyfallEvent {\r\n  CONNECT = \"connect\",\r\n  DISCONNECT = \"disconnect\",\r\n  JOIN = \"join\",\r\n  LEAVE = \"leave\",\r\n  CREATEROOM = \"createroom\",\r\n  CHANGENAME = \"changename\",\r\n  STARTGAME = \"startgame\",\r\n  ENDGAME = \"endgame\",\r\n  RECEIVEPAYLOAD = \"receivepayload\"\r\n}\r\n","import io from \"socket.io-client\";\r\nimport { fromEvent, Observable } from \"rxjs\";\r\nimport { SpyfallRoomConfig } from \"./models/SpyfallRoomConfig\";\r\nimport { SpyfallPayload } from \"./models/SpyfallPayload\";\r\nimport { SpyfallEvent } from \"./constants\";\r\n\r\nexport class SocketService {\r\n  private socket: SocketIOClient.Socket = {} as SocketIOClient.Socket;\r\n\r\n  public init(): SocketService {\r\n    //Edit this when deployed.\r\n    this.socket = io(\"https://ramblr.herokuapp.com/\");\r\n    // this.socket = io(\"localhost:8080\");\r\n    return this;\r\n  }\r\n\r\n  public getID(): string {\r\n    return this.socket.id;\r\n  }\r\n\r\n  public join(room: string, desiredName: string) {\r\n    this.socket.emit(SpyfallEvent.JOIN, room, desiredName);\r\n  }\r\n\r\n  public createRoom(\r\n    config: SpyfallRoomConfig,\r\n    desiredName: string,\r\n    locations: string[]\r\n  ) {\r\n    this.socket.emit(SpyfallEvent.CREATEROOM, config, desiredName, locations);\r\n  }\r\n\r\n  public startGame(roomName: string) {\r\n    this.socket.emit(SpyfallEvent.STARTGAME, roomName);\r\n  }\r\n\r\n  public endGame(roomName: string) {\r\n    this.socket.emit(SpyfallEvent.ENDGAME, roomName);\r\n  }\r\n\r\n  public leave(room: string) {\r\n    this.socket.emit(SpyfallEvent.LEAVE, room);\r\n  }\r\n\r\n  public changeUsername(roomName: string, name: string) {\r\n    this.socket.emit(SpyfallEvent.CHANGENAME, roomName, name);\r\n  }\r\n\r\n  public receivePayload(): Observable<SpyfallPayload> {\r\n    return fromEvent(this.socket, SpyfallEvent.RECEIVEPAYLOAD);\r\n  }\r\n\r\n  // disconnect - used when unmounting\r\n  public disconnect(): void {\r\n    this.socket.disconnect();\r\n  }\r\n}\r\n","import React, { createContext, useContext } from \"react\";\r\nimport { SocketService } from \"./SocketService\";\r\n\r\nexport const SpyfallContext: React.Context<SocketService> = createContext(\r\n  new SocketService()\r\n);\r\n\r\n// functional component context hook\r\nexport const useSpyfallContext = () => useContext(SpyfallContext);\r\n","import React, { useState } from \"react\";\r\nimport \"./CreateControls.css\";\r\nimport { GameState, Locations } from \"../constants\";\r\n\r\ninterface CreateControlsProps {\r\n  onGameStateChange(gameState: GameState): any;\r\n  onSubmit(\r\n    desiredName: string,\r\n    locationType: Locations,\r\n    roundLength: number,\r\n    locations: string[]\r\n  ): any;\r\n}\r\n\r\nconst CreateControls: React.FC<CreateControlsProps> = props => {\r\n  const [displayName, setDisplayName] = useState(\"\");\r\n  const [locationState, setLocationState] = useState(Locations.SP1);\r\n  const [desiredDuration, setDesiredDuration] = useState(8);\r\n  const [locations, setLocations] = useState(\"\");\r\n\r\n  const handleFormChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target;\r\n    setLocationState(parseInt(target.value));\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (displayName === \"\" || desiredDuration < 1 || desiredDuration > 20) {\r\n      //Handle errors somehow\r\n      return;\r\n    }\r\n    if (locationState === Locations.CUSTOM && locations !== \"\") {\r\n      const locs = locations.split(\",\");\r\n      if (locs.length > 0) {\r\n        props.onSubmit(displayName, locationState, desiredDuration, locs);\r\n      }\r\n    } else {\r\n      props.onSubmit(displayName, locationState, desiredDuration, []);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title\">Welcome to Spyfall</div>\r\n      <div className=\"create-controls\">\r\n        <input\r\n          className=\"create-controls-name-input textfield\"\r\n          type=\"text\"\r\n          placeholder=\"Your Name\"\r\n          value={displayName}\r\n          onChange={e => {\r\n            const text = e.target.value;\r\n            if (text.length <= 30) {\r\n              setDisplayName(text);\r\n            }\r\n          }}\r\n        ></input>\r\n        <div className=\"create-controls-locations-container\">\r\n          <p>Locations</p>\r\n          <form style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <div className=\"create-controls-radio\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loc\"\r\n                value={Locations.SP1}\r\n                onChange={handleFormChange}\r\n                defaultChecked\r\n              />\r\n              Spyfall 1 Locations\r\n            </div>\r\n            <div className=\"create-controls-radio\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loc\"\r\n                value={Locations.SP2}\r\n                onChange={handleFormChange}\r\n              />\r\n              Spyfall 2 Locations\r\n            </div>\r\n            <div className=\"create-controls-radio\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loc\"\r\n                value={Locations.BOTH}\r\n                onChange={handleFormChange}\r\n              />\r\n              Spyfall 1 and Spyfall 2 Locations\r\n            </div>\r\n            <div className=\"create-controls-radio\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loc\"\r\n                value={Locations.CUSTOM}\r\n                onChange={handleFormChange}\r\n              />\r\n              Custom\r\n            </div>\r\n            <input\r\n              className=\"create-controls-locations-input textfield\"\r\n              type=\"text\"\r\n              placeholder=\"Custom Locations\"\r\n              value={locations}\r\n              onChange={e => {\r\n                const text = e.target.value;\r\n                setLocations(text);\r\n              }}\r\n            ></input>\r\n          </form>\r\n        </div>\r\n        <div className=\"create-controls-container\">\r\n          <p>Round Length (minutes):</p>\r\n          <input\r\n            type=\"number\"\r\n            name=\"duration\"\r\n            value={desiredDuration}\r\n            min=\"1\"\r\n            max=\"10\"\r\n            onChange={e => setDesiredDuration(parseInt(e.target.value))}\r\n          ></input>\r\n        </div>\r\n        <div className=\"button-container\">\r\n          <button onClick={handleSubmit}>Create</button>\r\n          <button\r\n            onClick={() => {\r\n              props.onGameStateChange(GameState.SPLASH);\r\n            }}\r\n          >\r\n            Back\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateControls;\r\n","import React, { useState } from \"react\";\r\nimport { SpyfallPayload } from \"../models/SpyfallPayload\";\r\nimport \"./GameLobby.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEdit, faCheck, faBan } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCopy } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\ninterface GameLobbyProps {\r\n  userID: string;\r\n  payload: SpyfallPayload;\r\n  leaveLobby(): void;\r\n  startGame(roomName: string): void;\r\n  changeName(roomName: string, desiredName: string): void;\r\n}\r\nconst GameLobby: React.FC<GameLobbyProps> = props => {\r\n  const [showCopy, setShowCopy] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editedName, setEditedName] = useState(\r\n    props.payload.users[props.userID]\r\n  );\r\n  const users = props.payload.users;\r\n  const accessCode = props.payload.roomName;\r\n\r\n  const youRow = (\r\n    <>\r\n      <span className=\"player-list-player-name\">{users[props.userID]}</span>\r\n      <span className=\"player-list-player-you\">(you)</span>\r\n      <span className=\"player-list-you-edit-button\">\r\n        <button\r\n          className=\"name-edit-button\"\r\n          onClick={() => {\r\n            setEditedName(users[props.userID]); //Set value back to current name\r\n            setIsEditing(true);\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faEdit} />\r\n        </button>\r\n      </span>\r\n    </>\r\n  );\r\n\r\n  const pRow = (key: string) => {\r\n    return <span className=\"player-list-player-name\">{users[key]}</span>;\r\n  };\r\n\r\n  const editRow = (\r\n    <div className=\"player-list-edit-row\">\r\n      <input\r\n        value={editedName}\r\n        onChange={e => {\r\n          const text = e.target.value;\r\n          if (text.length <= 30) {\r\n            setEditedName(text);\r\n          }\r\n        }}\r\n      />\r\n      <button\r\n        className=\"name-edit-button\"\r\n        onClick={() => {\r\n          props.changeName(props.payload.roomName, editedName);\r\n          setIsEditing(false);\r\n        }}\r\n      >\r\n        <FontAwesomeIcon icon={faCheck} />\r\n      </button>\r\n      <button\r\n        className=\"name-edit-button\"\r\n        onClick={() => {\r\n          setIsEditing(false);\r\n        }}\r\n      >\r\n        <FontAwesomeIcon icon={faBan} />\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"game-lobby-container\">\r\n      <div className=\"title\">Waiting for Players...</div>\r\n      <div className=\"game-lobby-access-line\">\r\n        <span className=\"game-lobby-access-text\">Access Code</span>\r\n        <div className=\"game-lobby-access-container\">\r\n          <div\r\n            className={\r\n              showCopy ? \"game-lobby-copy-text show\" : \"game-lobby-copy-text\"\r\n            }\r\n            onAnimationEnd={() => setShowCopy(false)}\r\n          >\r\n            Copied!\r\n          </div>\r\n          <button\r\n            className=\"game-lobby-access-copy\"\r\n            onClick={() => {\r\n              const copy = document.getElementById(\"access-code\");\r\n              if (copy) {\r\n                let temp = document.createElement(\"input\");\r\n                temp.value = copy.textContent as string;\r\n                document.body.appendChild(temp);\r\n                temp.select();\r\n                document.execCommand(\"copy\");\r\n                temp.remove();\r\n                setShowCopy(true);\r\n              }\r\n            }}\r\n          >\r\n            <span id=\"access-code\" className=\"game-lobby-access-code\">\r\n              {accessCode}\r\n            </span>\r\n            <FontAwesomeIcon icon={faCopy} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"player-list-container\">\r\n        {Object.keys(users).map((key, index) => {\r\n          return (\r\n            <div className=\"player-list-cell\" key={key}>\r\n              <span className=\"player-list-cell-number\">{index + 1}</span>\r\n              {props.userID !== key && pRow(key)}\r\n              {props.userID === key && !isEditing && youRow}\r\n              {props.userID === key && isEditing && editRow}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"button-container\">\r\n        <button onClick={() => props.startGame(accessCode)}>Start Game</button>\r\n        <button onClick={() => props.leaveLobby()}>Leave Game</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameLobby;\r\n","import React, { useState } from \"react\";\r\n\r\ninterface JoinLobbyProps {\r\n  onSubmit(accessCode: string, desiredName: string): void;\r\n  requestBack(): void;\r\n}\r\n\r\nconst JoinLobby: React.FC<JoinLobbyProps> = props => {\r\n  const [accessCode, setAccessCode] = useState(\"\");\r\n  const [desiredName, setDesiredName] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className=\"title\">Welcome to Spyfall</div>\r\n      <div className=\"join-controls\">\r\n        <input\r\n          className=\"textfield\"\r\n          type=\"text\"\r\n          value={accessCode}\r\n          placeholder=\"Access code\"\r\n          onChange={e => {\r\n            const text = e.target.value;\r\n            if (text.length <= 30) {\r\n              setAccessCode(text);\r\n            }\r\n          }}\r\n        />\r\n        <input\r\n          className=\"textfield\"\r\n          type=\"text\"\r\n          value={desiredName}\r\n          placeholder=\"Your name\"\r\n          onChange={e => {\r\n            const text = e.target.value;\r\n            if (text.length <= 30) {\r\n              setDesiredName(text);\r\n            }\r\n          }}\r\n        />\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            marginTop: \"1rem\"\r\n          }}\r\n        >\r\n          <div className=\"button-container\">\r\n            <button onClick={() => props.onSubmit(accessCode, desiredName)}>\r\n              Join\r\n            </button>\r\n            <button onClick={() => props.requestBack()}>Back</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JoinLobby;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { SpyfallPayload } from \"../models/SpyfallPayload\";\r\nimport \"./SpyfallGame.css\";\r\n\r\ninterface SpyfallGameProps {\r\n  userID: string;\r\n  payload: SpyfallPayload;\r\n  handleEndGame(roomName: string): void;\r\n  handleLeaveGame(): void;\r\n}\r\n\r\nconst SpyfallGame: React.FC<SpyfallGameProps> = props => {\r\n  const payload = props.payload;\r\n  const users = props.payload.users;\r\n  const locations = payload.locations;\r\n  const location = payload.location;\r\n  const isSpy = props.userID === payload.spy;\r\n  const notSpy = props.userID !== payload.spy;\r\n  const timeBetween = Math.floor((payload.endTime - payload.startTime) / 1000);\r\n  const [time, setTime] = useState(timeBetween);\r\n  const [endGame, setEndGame] = useState(false);\r\n\r\n  //Timer\r\n  useEffect(() => {\r\n    let interval: any = null;\r\n    if (time <= 0) {\r\n      setEndGame(true);\r\n    } else if (!endGame && payload.inSession) {\r\n      interval = setInterval(() => {\r\n        setTime(time => time - 1);\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [payload.inSession, time]);\r\n\r\n  const minutesRem = Math.floor(time / 60);\r\n  const secondsRem = time % 60;\r\n  const formattedSeconds = secondsRem.toString().padStart(2, \"0\");\r\n\r\n  return (\r\n    <div className=\"spyfall-game-container\">\r\n      <div className=\"spyfallgame-timer\">\r\n        {minutesRem + \":\" + formattedSeconds}\r\n      </div>\r\n      <div className=\"spyfallgame-role-banner\">\r\n        {isSpy && <span>You are the spy!</span>}\r\n        {notSpy && (\r\n          <div className=\"agent-banner\">\r\n            <div>\r\n              You are <strong>not</strong> the spy!\r\n            </div>\r\n            <div className=\"agent-info\">\r\n              <div>The location: {location}</div>\r\n              <div>Your role: {payload.agents[props.userID]} </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"spyfallgame-info-container\">\r\n        <p>Players</p>\r\n        <div className=\"grid-container\">\r\n          {Object.keys(users).map((key, index) => {\r\n            const displayName = users[key];\r\n            return (\r\n              <div key={key} className=\"grid-item\">\r\n                <p>{displayName}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <p>Locations</p>\r\n        <div className=\"grid-container\">\r\n          {locations.map(location => {\r\n            const title = location[\"title\"];\r\n            return (\r\n              <div key={title} className=\"grid-item\">\r\n                <p>{title}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className=\"spyfallgame-controls\">\r\n        <div className=\"button-container\">\r\n          <button onClick={() => props.handleEndGame(payload.roomName)}>\r\n            End Game\r\n          </button>\r\n          <button onClick={props.handleLeaveGame}>Leave Game</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpyfallGame;\r\n","import React, { useState, useEffect, useContext } from \"react\";\nimport \"./Spyfall.css\";\nimport { SpyfallContext } from \"./SpyfallContext\";\nimport { GameState, Locations } from \"./constants\";\nimport { SpyfallPayload, getEmptyPayload } from \"./models/SpyfallPayload\";\nimport { createRoomConfig } from \"./models/SpyfallRoomConfig\";\nimport CreateControls from \"./components/CreateControls\";\nimport GameLobby from \"./components/GameLobby\";\nimport JoinLobby from \"./components/JoinLobby\";\nimport SpyfallGame from \"./components/SpyfallGame\";\n\nconst Spyfall: React.FC = () => {\n  const [gameState, setGameState] = useState(GameState.SPLASH);\n  const context = useContext(SpyfallContext);\n  const [gamePayload, setGamePayload] = useState<SpyfallPayload>(\n    getEmptyPayload()\n  );\n  const [userID, setUserID] = useState(\"\");\n\n  useEffect(() => {\n    context.init();\n\n    const awaitPayload = context.receivePayload();\n    awaitPayload.subscribe((payload: SpyfallPayload) => {\n      setUserID(context.getID());\n      setGamePayload(payload);\n      console.log(payload);\n      if (payload.inSession) {\n        setGameState(GameState.INGAME);\n      } else {\n        setGameState(GameState.LOBBY);\n      }\n    });\n\n    return function cleanup() {\n      context.disconnect();\n    };\n  }, [context]);\n\n  const controls = (\n    <>\n      <div className=\"title\">Welcome to Spyfall</div>\n      <div className=\"controls\">\n        <div className=\"button-container\">\n          <button\n            onClick={() => {\n              setGameState(GameState.CREATE);\n            }}\n          >\n            New Game\n          </button>\n          <button\n            onClick={() => {\n              setGameState(GameState.JOIN);\n            }}\n          >\n            Join Game\n          </button>\n        </div>\n      </div>\n    </>\n  );\n\n  const handleCreateSubmit = (\n    desiredName: string,\n    lState: Locations,\n    desiredDuration: number,\n    locations: string[]\n  ) => {\n    context.createRoom(\n      createRoomConfig(desiredDuration, lState),\n      desiredName,\n      locations\n    );\n  };\n\n  const handleLeave = () => {\n    context.leave(gamePayload.roomName);\n    setGamePayload(getEmptyPayload());\n    setGameState(GameState.SPLASH);\n  };\n\n  const handleStartGame = (roomName: string) => {\n    context.startGame(roomName);\n  };\n\n  const handleEndGame = (roomName: string) => {\n    context.endGame(roomName);\n  };\n\n  const handleChangeName = (roomName: string, desiredName: string) => {\n    context.changeUsername(roomName, desiredName);\n  };\n\n  return (\n    <div className=\"spyfall-wrapper\">\n      <div className=\"spyfall\">\n        {gameState === GameState.SPLASH && controls}\n        {gameState === GameState.CREATE && (\n          <CreateControls\n            onGameStateChange={setGameState}\n            onSubmit={handleCreateSubmit}\n          />\n        )}\n        {gameState === GameState.JOIN && (\n          <JoinLobby\n            onSubmit={(accessCode: string, desiredName: string) => {\n              context.join(accessCode, desiredName);\n            }}\n            requestBack={() => setGameState(GameState.SPLASH)}\n          />\n        )}\n        {gameState === GameState.LOBBY && (\n          <GameLobby\n            userID={userID}\n            payload={gamePayload}\n            leaveLobby={handleLeave}\n            startGame={handleStartGame}\n            changeName={handleChangeName}\n          />\n        )}\n        {gameState === GameState.INGAME && (\n          <SpyfallGame\n            userID={userID}\n            payload={gamePayload}\n            handleEndGame={handleEndGame}\n            handleLeaveGame={handleLeave}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Spyfall;\n","export interface SpyfallPayload {\r\n  roomName: string;\r\n  roundDuration: number;\r\n  locations: any[];\r\n  users: Record<string, string>;\r\n  inSession: boolean;\r\n  location: string;\r\n  startTime: number;\r\n  endTime: number;\r\n  spy: string;\r\n  agents: Record<string, string>;\r\n}\r\n\r\nexport const getEmptyPayload = (): SpyfallPayload => {\r\n  return {\r\n    roomName: \"\",\r\n    roundDuration: 0,\r\n    locations: [],\r\n    users: {},\r\n    inSession: false,\r\n    location: \"\",\r\n    startTime: 0,\r\n    endTime: 0,\r\n    spy: \"\",\r\n    agents: {}\r\n  };\r\n};\r\n","import { Locations } from \"../constants\";\r\n\r\nexport interface SpyfallRoomConfig {\r\n  roundDuration: number;\r\n  locationType: Locations;\r\n}\r\n\r\nexport const createRoomConfig = (\r\n  roundDuration: number,\r\n  locationType: Locations\r\n): SpyfallRoomConfig => {\r\n  return {\r\n    roundDuration: roundDuration,\r\n    locationType: locationType\r\n  };\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Spyfall from \"./Spyfall\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { SocketService } from \"./SocketService\";\nimport { SpyfallContext } from \"./SpyfallContext\";\n\nconst game = new SocketService();\n\nReactDOM.render(\n  <SpyfallContext.Provider value={game}>\n    <Spyfall />\n  </SpyfallContext.Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}