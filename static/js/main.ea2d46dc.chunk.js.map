{"version":3,"sources":["constants.ts","SocketService.ts","SpyfallContext.ts","components/CreateControls.tsx","components/GameLobby.tsx","components/JoinLobby.tsx","components/SpyfallGame.tsx","Spyfall.tsx","models/SpyfallPayload.ts","models/SpyfallRoomConfig.ts","serviceWorker.ts","index.tsx"],"names":["GameState","Locations","SpyfallEvent","SocketService","socket","this","io","id","room","desiredName","emit","JOIN","config","CREATEROOM","roomName","STARTGAME","ENDGAME","LEAVE","name","CHANGENAME","fromEvent","RECEIVEPAYLOAD","disconnect","SpyfallContext","createContext","CreateControls","props","useState","displayName","setDisplayName","SP1","locationState","setLocationState","desiredDuration","setDesiredDuration","handleFormChange","event","target","parseInt","value","className","type","placeholder","onChange","e","defaultChecked","SP2","BOTH","CUSTOM","min","max","onClick","onSubmit","onGameStateChange","SPLASH","GameLobby","users","payload","accessCode","icon","faShareSquare","Object","keys","map","key","index","userID","console","log","faEdit","startGame","leaveLobby","JoinLobby","setAccessCode","setDesiredName","style","display","justifyContent","marginTop","requestBack","SpyfallGame","locations","location","isSpy","spy","notSpy","timeBetween","Math","floor","endTime","startTime","time","setTime","endGame","setEndGame","useEffect","interval","inSession","setInterval","clearInterval","minutesRem","formattedSeconds","toString","padStart","agents","title","handleEndGame","handleLeaveGame","Spyfall","gameState","setGameState","context","useContext","roundDuration","gamePayload","setGamePayload","setUserID","init","receivePayload","subscribe","getID","INGAME","LOBBY","controls","CREATE","handleLeave","leave","lState","createRoom","locationType","join","Boolean","window","hostname","match","game","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAAYA,EAQAC,EAOAC,E,2GAfAF,O,mBAAAA,I,mBAAAA,I,eAAAA,I,iBAAAA,I,oBAAAA,M,cAQAC,O,aAAAA,I,aAAAA,I,eAAAA,I,oBAAAA,M,cAOAC,K,kBAAAA,E,wBAAAA,E,YAAAA,E,cAAAA,E,wBAAAA,E,wBAAAA,E,sBAAAA,E,kBAAAA,E,iCAAAA,M,KCTL,IAAMC,EAAb,iDACUC,OAAgC,GAD1C,mDAMI,OADAC,KAAKD,OAASE,IAAG,iCACVD,OANX,8BAUI,OAAOA,KAAKD,OAAOG,KAVvB,2BAacC,EAAcC,GACxBJ,KAAKD,OAAOM,KAAKR,EAAaS,KAAMH,EAAMC,KAd9C,iCAiBoBG,EAA2BH,GAC3CJ,KAAKD,OAAOM,KAAKR,EAAaW,WAAYD,EAAQH,KAlBtD,gCAqBmBK,GACfT,KAAKD,OAAOM,KAAKR,EAAaa,UAAWD,KAtB7C,8BAyBiBA,GACbT,KAAKD,OAAOM,KAAKR,EAAac,QAASF,KA1B3C,4BA6BeN,GACTH,KAAKD,OAAOM,KAAKR,EAAae,MAAOT,KA9B3C,qCAiCwBU,GAClBb,KAAKD,OAAOM,KAAKR,EAAaiB,WAAYD,KAlChD,uCAsCI,OAAOE,YAAUf,KAAKD,OAAQF,EAAamB,kBAtC/C,mCA2CIhB,KAAKD,OAAOkB,iBA3ChB,KCHaC,EAA+CC,wBAAc,IAAIrB,GCqE/DsB,G,MA/DuC,SAACC,GAAW,IAAD,EACvBC,mBAAS,IADc,mBACtDC,EADsD,KACzCC,EADyC,OAEnBF,mBAAS1B,EAAU6B,KAFA,mBAEtDC,EAFsD,KAEvCC,EAFuC,OAGfL,mBAAS,GAHM,mBAGtDM,EAHsD,KAGrCC,EAHqC,KAKvDC,EAAmB,SAACC,GACtB,IAAMC,EAASD,EAAMC,OACrBL,EAAiBM,SAASD,EAAOE,SAWrC,OACE,oCACE,yBAAKC,UAAU,SAAf,sBAGA,yBAAKA,UAAU,mBACX,2BAAOA,UAAU,6BAA6BC,KAAK,OAAOC,YAAY,YAAYH,MAAOX,EAAae,SAAU,SAACC,GAC/Gf,EAAee,EAAEP,OAAOE,UAE1B,yBAAKC,UAAU,uCACb,wCACA,8BACE,yBAAKA,UAAU,yBACb,2BAAOC,KAAK,QAAQvB,KAAK,MAAMqB,MAAOtC,EAAU6B,IAAKa,SAAUR,EAAkBU,gBAAc,IADjG,wBAGA,yBAAKL,UAAU,yBACb,2BAAOC,KAAK,QAAQvB,KAAK,MAAMqB,MAAOtC,EAAU6C,IAAKH,SAAUR,IADjE,wBAGA,yBAAKK,UAAU,yBACb,2BAAOC,KAAK,QAAQvB,KAAK,MAAMqB,MAAOtC,EAAU8C,KAAMJ,SAAUR,IADlE,sCAGA,yBAAKK,UAAU,yBACb,2BAAOC,KAAK,QAAQvB,KAAK,MAAMqB,MAAOtC,EAAU+C,OAAQL,SAAUR,IADpE,aAKJ,yBAAKK,UAAU,6BACb,sDACA,2BAAOC,KAAK,SAASvB,KAAK,WAAWqB,MAAON,EAAiBgB,IAAI,IAAIC,IAAI,KAAKP,SAAU,SAACC,GAAD,OAAOV,EAAmBI,SAASM,EAAEP,OAAOE,YAEtI,yBAAKC,UAAU,oBACb,4BAAQW,QAvCG,WACG,KAAhBvB,GAAsBK,EAAkB,GAAKA,EAAkB,IAInEP,EAAM0B,SAASxB,EAAaG,EAAeE,KAkCrC,UAGA,4BAAQkB,QAAS,WACfzB,EAAM2B,kBAAkBrD,EAAUsD,UADpC,a,wBCDCC,EAhD6B,SAAC7B,GACzC,IAAM8B,EAAQ9B,EAAM+B,QAAQD,MACtBE,EAAahC,EAAM+B,QAAQ3C,SAEjC,OACI,yBAAK0B,UAAU,wBACX,yBAAKA,UAAU,SAAf,0BAGA,yBAAKA,UAAU,0BAAf,eAEI,0BAAMjC,GAAG,cAAciC,UAAU,0BAC5BkB,GAEL,gCACI,kBAAC,IAAD,CAAiBC,KAAMC,QAG/B,yBAAKpB,UAAY,yBACZqB,OAAOC,KAAKN,GAAOO,KAAI,SAACC,EAAKC,GAC1B,OACI,yBAAKzB,UAAU,mBAAmBwB,IAAKA,GACnC,0BAAMxB,UAAU,2BAA2ByB,EAAQ,GACnD,0BAAMzB,UAAU,2BAA2BgB,EAAMQ,IAChDA,IAAQtC,EAAMwC,QAAU,0BAAM1B,UAAU,0BAAhB,SACxBwB,IAAQtC,EAAMwC,QAAU,0BAAM1B,UAAU,+BACrC,4BAAQA,UAAU,mBAAmBW,QAAS,WAC1CgB,QAAQC,IAAI,mBAEZ,kBAAC,IAAD,CAAiBT,KAAMU,aAO/C,yBAAK7B,UAAU,oBACX,4BAAQW,QAAS,kBAAMzB,EAAM4C,UAAUZ,KAAvC,cAGA,4BAAQP,QAAS,kBAAMzB,EAAM6C,eAA7B,iBCfDC,EA9B6B,SAAC9C,GAAW,IAAD,EACfC,mBAAS,IADM,mBAC5C+B,EAD4C,KAChCe,EADgC,OAEb9C,mBAAS,IAFI,mBAE5ClB,EAF4C,KAE/BiE,EAF+B,KAGnD,OACI,oCACI,yBAAKlC,UAAU,SAAf,sBAGA,yBAAKA,UAAU,iBACX,2BAAOC,KAAK,OAAOF,MAAOmB,EAAYhB,YAAY,cAAcC,SAAU,SAACC,GAAD,OAAO6B,EAAc7B,EAAEP,OAAOE,UACxG,2BAAOE,KAAK,OAAOF,MAAO9B,EAAaiC,YAAY,YAAYC,SAAU,SAACC,GAAD,OAAO8B,EAAe9B,EAAEP,OAAOE,UACpG,yBAAKoC,MAAO,CACRC,QAAS,OACTC,eAAgB,SAChBC,UAAW,SAEf,yBAAKtC,UAAU,oBACX,4BAAQW,QAAS,kBAAMzB,EAAM0B,SAASM,EAAYjD,KAAlD,QAGA,4BAAQ0C,QAAS,kBAAMzB,EAAMqD,gBAA7B,aCyETC,G,MAzFiC,SAACtD,GAC7C,IAAM+B,EAAU/B,EAAM+B,QAChBD,EAAQ9B,EAAM+B,QAAQD,MACtByB,EAAYxB,EAAQwB,UACpBC,EAAWzB,EAAQyB,SACnBC,EAAQzD,EAAMwC,SAAWT,EAAQ2B,IACjCC,EAAS3D,EAAMwC,SAAWT,EAAQ2B,IAClCE,EAAcC,KAAKC,OAAO/B,EAAQgC,QAAUhC,EAAQiC,WAAW,KAPd,EAQ/B/D,mBAAS2D,GARsB,mBAQhDK,EARgD,KAQ1CC,EAR0C,OASzBjE,oBAAS,GATgB,mBAShDkE,EATgD,KASvCC,EATuC,KAYvDC,qBAAU,WACN,IAAIC,EAAgB,KAWpB,OAVIL,GAAQ,EACRG,GAAW,IACHD,GAAWpC,EAAQwC,UAC3BD,EAAWE,aAAY,WACnBN,GAAQ,SAAAD,GAAI,OAAIA,EAAO,OACxB,KAEHQ,cAAcH,GAGX,WACHG,cAAcH,MAGnB,CAACvC,EAAQwC,UAAWN,IAEvB,IAAMS,EAAab,KAAKC,MAAMG,EAAK,IAE7BU,GADaV,EAAK,IACYW,WAAWC,SAAS,EAAG,KAE3D,OACI,yBAAK/D,UAAU,0BACX,yBAAKA,UAAU,qBACV4D,EAAa,IAAMC,GAExB,yBAAK7D,UAAU,2BACV2C,GAAS,kDACTE,GACG,yBAAK7C,UAAU,gBACX,wCAAa,uCAAb,aACA,yBAAKA,UAAU,cACX,8CAAoB0C,GACpB,2CAAiBzB,EAAQ+C,OAAO9E,EAAMwC,QAAtC,QAKhB,yBAAK1B,UAAU,8BACX,sCACA,yBAAKA,UAAU,kBACVqB,OAAOC,KAAKN,GAAOO,KAAI,SAACC,EAAKC,GAC1B,IAAMrC,EAAc4B,EAAMQ,GAC1B,OACI,yBAAKA,IAAKA,EAAKxB,UAAU,aACrB,2BAAIZ,QAKpB,wCACA,yBAAKY,UAAU,kBACVyC,EAAUlB,KAAI,SAACmB,GACZ,IAAMuB,EAAQvB,EAAQ,MACtB,OACI,yBAAKlB,IAAKyC,EAAOjE,UAAU,aACvB,2BAAIiE,SAMxB,yBAAKjE,UAAU,wBACX,yBAAKA,UAAU,oBACf,4BAAQW,QAAS,kBAAMzB,EAAMgF,cAAcjD,EAAQ3C,YAAnD,YAGA,4BAAQqC,QAASzB,EAAMiF,iBAAvB,mBCyBDC,EAzGW,WAAO,IAAD,EACIjF,mBAAS3B,EAAUsD,QADvB,mBACvBuD,EADuB,KACZC,EADY,KAExBC,EAAUC,qBAAWzF,GAFG,EAGQI,mBCC7B,CACHb,SAAU,GACVmG,cAAe,EACfhC,UAAW,GACXzB,MAAO,GACPyC,WAAW,EACXf,SAAU,GACVQ,UAAW,EACXD,QAAS,EACTL,IAAK,GACLoB,OAAQ,KDdgB,mBAGvBU,EAHuB,KAGVC,EAHU,OAIFxF,mBAAS,IAJP,mBAIvBuC,EAJuB,KAIfkD,EAJe,KAM9BrB,qBAAU,WAcR,OAbAgB,EAAQM,OAEaN,EAAQO,iBAChBC,WAAU,SAAC9D,GACtB2D,EAAUL,EAAQS,SAClBL,EAAe1D,GACXA,EAAQwC,UACVa,EAAa9G,EAAUyH,QAEvBX,EAAa9G,EAAU0H,UAIpB,WACLX,EAAQzF,gBAET,IAEH,IAAMqG,EACJ,oCACE,yBAAKnF,UAAU,SAAf,sBAGA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,oBACb,4BAAQW,QAAS,WACf2D,EAAa9G,EAAU4H,UADzB,YAKA,4BAAQzE,QAAS,WACf2D,EAAa9G,EAAUW,QADzB,gBAcFkH,EAAc,WAClBd,EAAQe,MAAMZ,EAAYpG,UAC1BqG,ECjDO,CACHrG,SAAU,GACVmG,cAAe,EACfhC,UAAW,GACXzB,MAAO,GACPyC,WAAW,EACXf,SAAU,GACVQ,UAAW,EACXD,QAAS,EACTL,IAAK,GACLoB,OAAQ,KDwCZM,EAAa9G,EAAUsD,SAYzB,OACE,yBAAKd,UAAU,mBACb,yBAAKA,UAAU,WACZqE,IAAc7G,EAAUsD,QAAUqE,EAClCd,IAAc7G,EAAU4H,QACvB,kBAAC,EAAD,CACEvE,kBAAmByD,EACnB1D,SA1BiB,SAAC3C,EAAqBsH,EAAmB9F,GAClE8E,EAAQiB,WEnDD,CACHf,cFkDgChF,EEjDhCgG,aFiDiDF,GAAStH,MA4BzDoG,IAAc7G,EAAUW,MACvB,kBAAC,EAAD,CACEyC,SAAY,SAACM,EAAoBjD,GAC/BsG,EAAQmB,KAAKxE,EAAYjD,IAE3BsE,YAAa,kBAAM+B,EAAa9G,EAAUsD,WAG7CuD,IAAc7G,EAAU0H,OACvB,kBAAC,EAAD,CACExD,OAAQA,EACRT,QAASyD,EACT3C,WAAYsD,EACZvD,UAhCc,SAACxD,GACvBiG,EAAQzC,UAAUxD,MAkCb+F,IAAc7G,EAAUyH,QACvB,kBAAC,EAAD,CACEvD,OAAQA,EACRT,QAASyD,EACTR,cAnCY,SAAC5F,GACrBiG,EAAQlB,QAAQ/E,IAmCR6F,gBAAiBkB,OGhGTM,QACW,cAA7BC,OAAOlD,SAASmD,UAEe,UAA7BD,OAAOlD,SAASmD,UAEhBD,OAAOlD,SAASmD,SAASC,MACvB,2DCTN,IAAMC,EAAO,IAAIpI,EAEjBqI,IAASC,OACP,kBAAClH,EAAemH,SAAhB,CAAyBnG,MAAOgG,GAC9B,kBAAC,EAAD,OAEAI,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea2d46dc.chunk.js","sourcesContent":["export enum GameState {\r\n    SPLASH,\r\n    CREATE,\r\n    JOIN,\r\n    LOBBY,\r\n    INGAME\r\n}\r\n\r\nexport enum Locations {\r\n    SP1,\r\n    SP2,\r\n    BOTH,\r\n    CUSTOM\r\n}\r\n\r\nexport enum SpyfallEvent {\r\n    CONNECT = 'connect',\r\n    DISCONNECT = 'disconnect',\r\n    JOIN = 'join',\r\n    LEAVE = 'leave',\r\n    CREATEROOM = 'createroom',\r\n    CHANGENAME = 'changename',\r\n    STARTGAME = 'startgame',\r\n    ENDGAME = 'endgame',\r\n    RECEIVEPAYLOAD = 'receivepayload'\r\n}","import io from 'socket.io-client';\r\nimport { fromEvent, Observable } from 'rxjs';\r\nimport { SpyfallRoomConfig } from './models/SpyfallRoomConfig';\r\nimport { SpyfallPayload } from './models/SpyfallPayload';\r\nimport {SpyfallEvent} from './constants'\r\n\r\nexport class SocketService {\r\n  private socket: SocketIOClient.Socket = {} as SocketIOClient.Socket;\r\n\r\n  public init (): SocketService {\r\n    //Edit this when deployed.\r\n    this.socket = io('https://ramblr.herokuapp.com/');\r\n    return this;\r\n  }\r\n\r\n  public getID(): string {\r\n    return this.socket.id;\r\n  }\r\n\r\n  public join(room: string, desiredName: string) {\r\n    this.socket.emit(SpyfallEvent.JOIN, room, desiredName);\r\n  }\r\n\r\n  public createRoom(config: SpyfallRoomConfig, desiredName: string) {\r\n    this.socket.emit(SpyfallEvent.CREATEROOM, config, desiredName);\r\n  }\r\n\r\n  public startGame(roomName: string) {\r\n    this.socket.emit(SpyfallEvent.STARTGAME, roomName);\r\n  }\r\n\r\n  public endGame(roomName: string) {\r\n    this.socket.emit(SpyfallEvent.ENDGAME, roomName);\r\n  }\r\n\r\n  public leave(room: string) {\r\n      this.socket.emit(SpyfallEvent.LEAVE, room);\r\n  }\r\n\r\n  public changeUsername(name: string) {\r\n      this.socket.emit(SpyfallEvent.CHANGENAME, name);\r\n  }\r\n\r\n  public receivePayload(): Observable<SpyfallPayload> {\r\n    return fromEvent(this.socket, SpyfallEvent.RECEIVEPAYLOAD)\r\n  }\r\n  \r\n  // disconnect - used when unmounting\r\n  public disconnect (): void {\r\n    this.socket.disconnect();\r\n  }\r\n}","import React, { createContext, useContext } from 'react';\r\nimport { SocketService } from './SocketService';\r\n\r\nexport const SpyfallContext: React.Context<SocketService> = createContext(new SocketService());\r\n\r\n// functional component context hook\r\nexport const useSpyfallContext = () => useContext(SpyfallContext);","import React, {useState} from 'react';\r\nimport './CreateControls.css';\r\nimport {GameState, Locations} from '../constants';\r\n\r\ninterface CreateControlsProps {\r\n    onGameStateChange(gameState: GameState): any;\r\n    onSubmit(desiredName: string, locationType: Locations, roundLength: number): any;\r\n}\r\n\r\nconst CreateControls: React.FC<CreateControlsProps> = (props) => {\r\n    const [displayName, setDisplayName] = useState(\"\");\r\n    const [locationState, setLocationState] = useState(Locations.SP1);\r\n    const [desiredDuration, setDesiredDuration] = useState(8);\r\n\r\n    const handleFormChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = event.target;\r\n        setLocationState(parseInt(target.value));\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (displayName === \"\" || desiredDuration < 1 || desiredDuration > 20) {\r\n            //Handle errors somehow\r\n            return\r\n        }\r\n        props.onSubmit(displayName, locationState, desiredDuration);\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className=\"title\">\r\n          Welcome to Spyfall\r\n        </div>\r\n        <div className=\"create-controls\">\r\n            <input className=\"create-contorls-name-input\" type=\"text\" placeholder=\"Your Name\" value={displayName} onChange={(e) => {\r\n              setDisplayName(e.target.value);\r\n            }}></input>\r\n            <div className=\"create-controls-locations-container\">\r\n              <p>Locations</p>\r\n              <form>\r\n                <div className=\"create-controls-radio\">\r\n                  <input type=\"radio\" name=\"loc\" value={Locations.SP1} onChange={handleFormChange} defaultChecked/> Spyfall 1 Locations\r\n                </div>\r\n                <div className=\"create-controls-radio\">\r\n                  <input type=\"radio\" name=\"loc\" value={Locations.SP2} onChange={handleFormChange}/> Spyfall 2 Locations\r\n                </div>\r\n                <div className=\"create-controls-radio\">\r\n                  <input type=\"radio\" name=\"loc\" value={Locations.BOTH} onChange={handleFormChange}/> Spyfall 1 and Spyfall 2 Locations\r\n                </div>\r\n                <div className=\"create-controls-radio\">\r\n                  <input type=\"radio\" name=\"loc\" value={Locations.CUSTOM} onChange={handleFormChange}/> Custom\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <div className=\"create-controls-container\">\r\n              <p>Round Length (minutes):</p>\r\n              <input type=\"number\" name=\"duration\" value={desiredDuration} min=\"1\" max=\"10\" onChange={(e) => setDesiredDuration(parseInt(e.target.value))}></input>\r\n            </div>\r\n            <div className=\"button-container\">\r\n              <button onClick={handleSubmit}>\r\n                Create\r\n              </button>\r\n              <button onClick={() => {\r\n                props.onGameStateChange(GameState.SPLASH)\r\n              }}>\r\n                Back\r\n              </button>\r\n            </div>\r\n          </div>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default CreateControls;","import React from 'react';\r\nimport { SpyfallPayload } from '../models/SpyfallPayload';\r\nimport './GameLobby.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEdit, faShareSquare } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface GameLobbyProps {\r\n    userID: string;\r\n    payload: SpyfallPayload;\r\n    leaveLobby(): void;\r\n    startGame(roomName: string): void;\r\n}\r\nconst GameLobby: React.FC<GameLobbyProps> = (props) => {\r\n    const users = props.payload.users;\r\n    const accessCode = props.payload.roomName;\r\n\r\n    return (\r\n        <div className=\"game-lobby-container\">\r\n            <div className=\"title\">\r\n                Waiting for Players...\r\n            </div>\r\n            <div className=\"game-lobby-access-line\">\r\n                Access Code: \r\n                <span id=\"access-code\" className=\"game-lobby-access-code\">\r\n                    {accessCode}\r\n                </span>\r\n                <button>\r\n                    <FontAwesomeIcon icon={faShareSquare} />\r\n                </button>\r\n            </div>\r\n            <div className = \"player-list-container\">\r\n                {Object.keys(users).map((key, index) => {\r\n                    return (\r\n                        <div className=\"player-list-cell\" key={key}>\r\n                            <span className=\"player-list-cell-number\">{index + 1}</span>\r\n                            <span className=\"player-list-player-name\">{users[key]}</span>\r\n                            {key === props.userID && <span className=\"player-list-player-you\">(you)</span>}\r\n                            {key === props.userID && <span className=\"player-list-you-edit-button\">\r\n                                <button className=\"name-edit-button\" onClick={() => {\r\n                                    console.log(\"Clicked edit!\");\r\n                                }}>\r\n                                    <FontAwesomeIcon icon={faEdit} />\r\n                                </button>\r\n                            </span>}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={() => props.startGame(accessCode)}> \r\n                    Start Game\r\n                </button>\r\n                <button onClick={() => props.leaveLobby()}> \r\n                    Leave Game\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameLobby;","import React, {useState} from 'react';\r\n\r\ninterface JoinLobbyProps {\r\n    onSubmit(accessCode: string, desiredName: string): void,\r\n    requestBack(): void\r\n}\r\n\r\nconst JoinLobby: React.FC<JoinLobbyProps> = (props) => {\r\n    const [accessCode, setAccessCode] = useState(\"\");\r\n    const [desiredName, setDesiredName] = useState(\"\");\r\n    return (\r\n        <>\r\n            <div className=\"title\">\r\n                Welcome to Spyfall\r\n            </div>\r\n            <div className=\"join-controls\">\r\n                <input type=\"text\" value={accessCode} placeholder=\"Access code\" onChange={(e) => setAccessCode(e.target.value)}></input>\r\n                <input type=\"text\" value={desiredName} placeholder=\"Your name\" onChange={(e) => setDesiredName(e.target.value)}></input>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"1rem\",\r\n                    }}>\r\n                    <div className=\"button-container\">\r\n                        <button onClick={() => props.onSubmit(accessCode, desiredName)}>\r\n                            Join\r\n                        </button>\r\n                        <button onClick={() => props.requestBack()}>\r\n                            Back\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default JoinLobby;","import React, {useState, useEffect} from 'react';\r\nimport { SpyfallPayload } from '../models/SpyfallPayload';\r\nimport './SpyfallGame.css';\r\n\r\ninterface SpyfallGameProps {\r\n    userID: string\r\n    payload: SpyfallPayload;\r\n    handleEndGame(roomName: string): void;\r\n    handleLeaveGame(): void;\r\n}\r\n\r\nconst SpyfallGame: React.FC<SpyfallGameProps> = (props) => {\r\n    const payload = props.payload;\r\n    const users = props.payload.users;\r\n    const locations = payload.locations;\r\n    const location = payload.location;\r\n    const isSpy = props.userID === payload.spy;\r\n    const notSpy = props.userID !== payload.spy\r\n    const timeBetween = Math.floor((payload.endTime - payload.startTime)/1000)\r\n    const [time, setTime] = useState(timeBetween);\r\n    const [endGame, setEndGame] = useState(false);\r\n\r\n    //Timer\r\n    useEffect(() => {\r\n        let interval: any = null;\r\n        if (time <= 0) {\r\n            setEndGame(true);\r\n        } else if (!endGame && payload.inSession) {\r\n            interval = setInterval(() => {\r\n                setTime(time => time - 1);\r\n            }, 1000)\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [payload.inSession, time])\r\n\r\n    const minutesRem = Math.floor(time/60);\r\n    const secondsRem = time%60;\r\n    const formattedSeconds = secondsRem.toString().padStart(2, \"0\")\r\n\r\n    return (\r\n        <div className=\"spyfall-game-container\">\r\n            <div className=\"spyfallgame-timer\">\r\n                {minutesRem + \":\" + formattedSeconds}\r\n            </div>\r\n            <div className=\"spyfallgame-role-banner\">\r\n                {isSpy && <span>You are the spy!</span>}\r\n                {notSpy &&\r\n                    <div className=\"agent-banner\">\r\n                        <div>You are <strong>not</strong> the spy!</div>\r\n                        <div className=\"agent-info\">\r\n                            <div>The location: {location}</div>\r\n                            <div>Your role: {payload.agents[props.userID]} </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n            <div className=\"spyfallgame-info-container\">\r\n                <p>Players</p>\r\n                <div className=\"grid-container\">\r\n                    {Object.keys(users).map((key, index) => {\r\n                        const displayName = users[key]; \r\n                        return (\r\n                            <div key={key} className=\"grid-item\">\r\n                                <p>{displayName}</p>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <p>Locations</p>\r\n                <div className=\"grid-container\">\r\n                    {locations.map((location) => {\r\n                        const title = location['title'];\r\n                        return (\r\n                            <div key={title} className=\"grid-item\">\r\n                                <p>{title}</p>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className=\"spyfallgame-controls\">\r\n                <div className=\"button-container\">\r\n                <button onClick={() => props.handleEndGame(payload.roomName)}>\r\n                    End Game\r\n                </button>\r\n                <button onClick={props.handleLeaveGame}>\r\n                    Leave Game\r\n                </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpyfallGame","import React, {useState, useEffect, useContext} from 'react';\nimport './Spyfall.css';\nimport {SpyfallContext} from './SpyfallContext';\nimport {GameState, Locations} from './constants';\nimport {SpyfallPayload, getEmptyPayload} from './models/SpyfallPayload';\nimport {createRoomConfig} from './models/SpyfallRoomConfig';\nimport CreateControls from './components/CreateControls';\nimport GameLobby from './components/GameLobby';\nimport JoinLobby from './components/JoinLobby';\nimport SpyfallGame from './components/SpyfallGame';\n\nconst Spyfall: React.FC = () => {\n  const [gameState, setGameState] = useState(GameState.SPLASH);\n  const context = useContext(SpyfallContext)\n  const [gamePayload, setGamePayload] = useState<SpyfallPayload>(getEmptyPayload());\n  const [userID, setUserID] = useState(\"\");\n\n  useEffect(() => {\n    context.init();\n\n    const awaitPayload = context.receivePayload();\n    awaitPayload.subscribe((payload: SpyfallPayload) => {\n      setUserID(context.getID());\n      setGamePayload(payload);\n      if (payload.inSession) {\n        setGameState(GameState.INGAME);\n      } else {\n        setGameState(GameState.LOBBY);\n      }\n    });\n\n    return function cleanup() {\n      context.disconnect();\n    }\n  }, [])\n\n  const controls = (\n    <>\n      <div className=\"title\">\n        Welcome to Spyfall\n      </div>\n      <div className=\"controls\">\n        <div className=\"button-container\">\n          <button onClick={() => {\n            setGameState(GameState.CREATE)\n          }}>\n            New Game\n          </button>\n          <button onClick={() => {\n            setGameState(GameState.JOIN)\n          }}>\n            Join Game\n          </button>\n        </div>\n      </div>\n    </>\n  )\n\n  const handleCreateSubmit = (desiredName: string, lState: Locations, desiredDuration: number) => {\n    context.createRoom(createRoomConfig(desiredDuration, lState), desiredName);\n  }\n\n  const handleLeave = () => {\n    context.leave(gamePayload.roomName);\n    setGamePayload(getEmptyPayload());\n    setGameState(GameState.SPLASH);\n  }\n\n  const handleStartGame = (roomName: string) => {\n    context.startGame(roomName);\n  }\n\n  const handleEndGame = (roomName: string) => {\n    context.endGame(roomName);\n  }\n\n\n  return (\n    <div className=\"spyfall-wrapper\">\n      <div className=\"spyfall\">\n        {gameState === GameState.SPLASH && controls}\n        {gameState === GameState.CREATE && \n          <CreateControls \n            onGameStateChange={setGameState}\n            onSubmit={handleCreateSubmit}\n          />\n        }\n        {gameState === GameState.JOIN && \n          <JoinLobby\n            onSubmit = {(accessCode: string, desiredName: string) => {\n              context.join(accessCode, desiredName);\n            }}\n            requestBack={() => setGameState(GameState.SPLASH)}\n          />\n        }\n        {gameState === GameState.LOBBY &&\n          <GameLobby\n            userID={userID}\n            payload={gamePayload}\n            leaveLobby={handleLeave}\n            startGame={handleStartGame}\n          />\n        }\n        {gameState === GameState.INGAME &&\n          <SpyfallGame\n            userID={userID}\n            payload={gamePayload}\n            handleEndGame={handleEndGame}\n            handleLeaveGame={handleLeave}\n          />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Spyfall;\n","export interface SpyfallPayload {\r\n    roomName: string;\r\n    roundDuration: number;\r\n    locations: any[];\r\n    users: Record<string, string>;\r\n    inSession: boolean;\r\n    location: string;\r\n    startTime: number;\r\n    endTime: number;\r\n    spy: string;\r\n    agents: Record<string, string>;\r\n}\r\n\r\n\r\nexport const getEmptyPayload = ():SpyfallPayload => {\r\n    return {\r\n        roomName: \"\",\r\n        roundDuration: 0,\r\n        locations: [],\r\n        users: {},\r\n        inSession: false,\r\n        location: \"\",\r\n        startTime: 0,\r\n        endTime: 0,\r\n        spy: \"\",\r\n        agents: {},\r\n    }\r\n}","import { Locations } from \"../constants\";\r\n\r\nexport interface SpyfallRoomConfig {\r\n    roundDuration: number;\r\n    locationType: Locations;\r\n}\r\n\r\nexport const createRoomConfig = (roundDuration: number, locationType: Locations):SpyfallRoomConfig => {\r\n    return {\r\n        roundDuration: roundDuration,\r\n        locationType: locationType\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Spyfall from './Spyfall';\nimport * as serviceWorker from './serviceWorker';\n\nimport { SocketService } from './SocketService';\nimport { SpyfallContext } from './SpyfallContext';\n\nconst game = new SocketService();\n\nReactDOM.render(\n  <SpyfallContext.Provider value={game}>\n    <Spyfall />\n  </SpyfallContext.Provider>\n  , document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}