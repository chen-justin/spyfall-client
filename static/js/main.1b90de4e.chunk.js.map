{"version":3,"sources":["constants.ts","SocketService.ts","SpyfallContext.ts","components/CreateControls.tsx","components/GameLobby.tsx","components/JoinLobby.tsx","components/SpyfallGame.tsx","Spyfall.tsx","models/SpyfallPayload.ts","models/SpyfallRoomConfig.ts","serviceWorker.ts","index.tsx"],"names":["GameState","Locations","SpyfallEvent","SocketService","socket","this","io","id","room","desiredName","emit","JOIN","config","CREATEROOM","roomName","STARTGAME","ENDGAME","LEAVE","name","CHANGENAME","fromEvent","RECEIVEPAYLOAD","disconnect","SpyfallContext","createContext","CreateControls","props","useState","displayName","setDisplayName","SP1","locationState","setLocationState","desiredDuration","setDesiredDuration","handleFormChange","event","target","parseInt","value","className","type","placeholder","onChange","e","defaultChecked","SP2","BOTH","CUSTOM","min","max","onClick","onSubmit","onGameStateChange","SPLASH","GameLobby","showCopy","setShowCopy","isEditing","setIsEditing","payload","users","userID","editedName","setEditedName","accessCode","youRow","icon","faEdit","editRow","text","length","changeName","faCheck","faBan","onAnimationEnd","copy","document","getElementById","temp","createElement","textContent","body","appendChild","select","execCommand","remove","faCopy","Object","keys","map","key","index","pRow","startGame","leaveLobby","JoinLobby","setAccessCode","setDesiredName","style","display","justifyContent","marginTop","requestBack","SpyfallGame","locations","location","isSpy","spy","notSpy","timeBetween","Math","floor","endTime","startTime","time","setTime","endGame","setEndGame","useEffect","interval","inSession","setInterval","clearInterval","minutesRem","formattedSeconds","toString","padStart","agents","title","handleEndGame","handleLeaveGame","Spyfall","gameState","setGameState","context","useContext","roundDuration","gamePayload","setGamePayload","setUserID","init","receivePayload","subscribe","getID","INGAME","LOBBY","controls","CREATE","handleLeave","leave","lState","createRoom","locationType","join","changeUsername","Boolean","window","hostname","match","game","ReactDOM","render","Provider","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b90de4e.chunk.js","sourcesContent":["export enum GameState {\r\n  SPLASH,\r\n  CREATE,\r\n  JOIN,\r\n  LOBBY,\r\n  INGAME\r\n}\r\n\r\nexport enum Locations {\r\n  SP1,\r\n  SP2,\r\n  BOTH,\r\n  CUSTOM\r\n}\r\n\r\nexport enum SpyfallEvent {\r\n  CONNECT = \"connect\",\r\n  DISCONNECT = \"disconnect\",\r\n  JOIN = \"join\",\r\n  LEAVE = \"leave\",\r\n  CREATEROOM = \"createroom\",\r\n  CHANGENAME = \"changename\",\r\n  STARTGAME = \"startgame\",\r\n  ENDGAME = \"endgame\",\r\n  RECEIVEPAYLOAD = \"receivepayload\"\r\n}\r\n","import io from \"socket.io-client\";\r\nimport { fromEvent, Observable } from \"rxjs\";\r\nimport { SpyfallRoomConfig } from \"./models/SpyfallRoomConfig\";\r\nimport { SpyfallPayload } from \"./models/SpyfallPayload\";\r\nimport { SpyfallEvent } from \"./constants\";\r\n\r\nexport class SocketService {\r\n  private socket: SocketIOClient.Socket = {} as SocketIOClient.Socket;\r\n\r\n  public init(): SocketService {\r\n    //Edit this when deployed.\r\n    this.socket = io(\"https://ramblr.herokuapp.com/\");\r\n    // this.socket = io('localhost:8080');\r\n    return this;\r\n  }\r\n\r\n  public getID(): string {\r\n    return this.socket.id;\r\n  }\r\n\r\n  public join(room: string, desiredName: string) {\r\n    this.socket.emit(SpyfallEvent.JOIN, room, desiredName);\r\n  }\r\n\r\n  public createRoom(config: SpyfallRoomConfig, desiredName: string) {\r\n    this.socket.emit(SpyfallEvent.CREATEROOM, config, desiredName);\r\n  }\r\n\r\n  public startGame(roomName: string) {\r\n    this.socket.emit(SpyfallEvent.STARTGAME, roomName);\r\n  }\r\n\r\n  public endGame(roomName: string) {\r\n    this.socket.emit(SpyfallEvent.ENDGAME, roomName);\r\n  }\r\n\r\n  public leave(room: string) {\r\n    this.socket.emit(SpyfallEvent.LEAVE, room);\r\n  }\r\n\r\n  public changeUsername(roomName: string, name: string) {\r\n    this.socket.emit(SpyfallEvent.CHANGENAME, roomName, name);\r\n  }\r\n\r\n  public receivePayload(): Observable<SpyfallPayload> {\r\n    return fromEvent(this.socket, SpyfallEvent.RECEIVEPAYLOAD);\r\n  }\r\n\r\n  // disconnect - used when unmounting\r\n  public disconnect(): void {\r\n    this.socket.disconnect();\r\n  }\r\n}\r\n","import React, { createContext, useContext } from \"react\";\r\nimport { SocketService } from \"./SocketService\";\r\n\r\nexport const SpyfallContext: React.Context<SocketService> = createContext(\r\n  new SocketService()\r\n);\r\n\r\n// functional component context hook\r\nexport const useSpyfallContext = () => useContext(SpyfallContext);\r\n","import React, { useState } from \"react\";\r\nimport \"./CreateControls.css\";\r\nimport { GameState, Locations } from \"../constants\";\r\n\r\ninterface CreateControlsProps {\r\n  onGameStateChange(gameState: GameState): any;\r\n  onSubmit(\r\n    desiredName: string,\r\n    locationType: Locations,\r\n    roundLength: number\r\n  ): any;\r\n}\r\n\r\nconst CreateControls: React.FC<CreateControlsProps> = props => {\r\n  const [displayName, setDisplayName] = useState(\"\");\r\n  const [locationState, setLocationState] = useState(Locations.SP1);\r\n  const [desiredDuration, setDesiredDuration] = useState(8);\r\n\r\n  const handleFormChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target;\r\n    setLocationState(parseInt(target.value));\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (displayName === \"\" || desiredDuration < 1 || desiredDuration > 20) {\r\n      //Handle errors somehow\r\n      return;\r\n    }\r\n    props.onSubmit(displayName, locationState, desiredDuration);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title\">Welcome to Spyfall</div>\r\n      <div className=\"create-controls\">\r\n        <input\r\n          className=\"create-controls-name-input textfield\"\r\n          type=\"text\"\r\n          placeholder=\"Your Name\"\r\n          value={displayName}\r\n          onChange={e => {\r\n            setDisplayName(e.target.value);\r\n          }}\r\n        ></input>\r\n        <div className=\"create-controls-locations-container\">\r\n          <p>Locations</p>\r\n          <form>\r\n            <div className=\"create-controls-radio\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loc\"\r\n                value={Locations.SP1}\r\n                onChange={handleFormChange}\r\n                defaultChecked\r\n              />{\" \"}\r\n              Spyfall 1 Locations\r\n            </div>\r\n            <div className=\"create-controls-radio\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loc\"\r\n                value={Locations.SP2}\r\n                onChange={handleFormChange}\r\n              />{\" \"}\r\n              Spyfall 2 Locations\r\n            </div>\r\n            <div className=\"create-controls-radio\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loc\"\r\n                value={Locations.BOTH}\r\n                onChange={handleFormChange}\r\n              />{\" \"}\r\n              Spyfall 1 and Spyfall 2 Locations\r\n            </div>\r\n            <div className=\"create-controls-radio\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loc\"\r\n                value={Locations.CUSTOM}\r\n                onChange={handleFormChange}\r\n              />{\" \"}\r\n              Custom\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div className=\"create-controls-container\">\r\n          <p>Round Length (minutes):</p>\r\n          <input\r\n            type=\"number\"\r\n            name=\"duration\"\r\n            value={desiredDuration}\r\n            min=\"1\"\r\n            max=\"10\"\r\n            onChange={e => setDesiredDuration(parseInt(e.target.value))}\r\n          ></input>\r\n        </div>\r\n        <div className=\"button-container\">\r\n          <button onClick={handleSubmit}>Create</button>\r\n          <button\r\n            onClick={() => {\r\n              props.onGameStateChange(GameState.SPLASH);\r\n            }}\r\n          >\r\n            Back\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateControls;\r\n","import React, { useState } from \"react\";\r\nimport { SpyfallPayload } from \"../models/SpyfallPayload\";\r\nimport \"./GameLobby.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEdit, faCheck, faBan } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCopy } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\ninterface GameLobbyProps {\r\n  userID: string;\r\n  payload: SpyfallPayload;\r\n  leaveLobby(): void;\r\n  startGame(roomName: string): void;\r\n  changeName(roomName: string, desiredName: string): void;\r\n}\r\nconst GameLobby: React.FC<GameLobbyProps> = props => {\r\n  const [showCopy, setShowCopy] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editedName, setEditedName] = useState(\r\n    props.payload.users[props.userID]\r\n  );\r\n  const users = props.payload.users;\r\n  const accessCode = props.payload.roomName;\r\n\r\n  const youRow = (\r\n    <>\r\n      <span className=\"player-list-player-name\">{users[props.userID]}</span>\r\n      <span className=\"player-list-player-you\">(you)</span>\r\n      <span className=\"player-list-you-edit-button\">\r\n        <button\r\n          className=\"name-edit-button\"\r\n          onClick={() => {\r\n            setEditedName(users[props.userID]); //Set value back to current name\r\n            setIsEditing(true);\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faEdit} />\r\n        </button>\r\n      </span>\r\n    </>\r\n  );\r\n\r\n  const pRow = (key: string) => {\r\n    return <span className=\"player-list-player-name\">{users[key]}</span>;\r\n  };\r\n\r\n  const editRow = (\r\n    <div className=\"player-list-edit-row\">\r\n      <input\r\n        value={editedName}\r\n        onChange={e => {\r\n          const text = e.target.value;\r\n          if (text.length <= 30) {\r\n            setEditedName(text);\r\n          }\r\n        }}\r\n      />\r\n      <button\r\n        className=\"name-edit-button\"\r\n        onClick={() => {\r\n          props.changeName(props.payload.roomName, editedName);\r\n          setIsEditing(false);\r\n        }}\r\n      >\r\n        <FontAwesomeIcon icon={faCheck} />\r\n      </button>\r\n      <button\r\n        className=\"name-edit-button\"\r\n        onClick={() => {\r\n          setIsEditing(false);\r\n        }}\r\n      >\r\n        <FontAwesomeIcon icon={faBan} />\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"game-lobby-container\">\r\n      <div className=\"title\">Waiting for Players...</div>\r\n      <div className=\"game-lobby-access-line\">\r\n        <span className=\"game-lobby-access-text\">Access Code</span>\r\n        <div className=\"game-lobby-access-container\">\r\n          <div\r\n            className={\r\n              showCopy ? \"game-lobby-copy-text show\" : \"game-lobby-copy-text\"\r\n            }\r\n            onAnimationEnd={() => setShowCopy(false)}\r\n          >\r\n            Copied!\r\n          </div>\r\n          <button\r\n            className=\"game-lobby-access-copy\"\r\n            onClick={() => {\r\n              const copy = document.getElementById(\"access-code\");\r\n              if (copy) {\r\n                let temp = document.createElement(\"input\");\r\n                temp.value = copy.textContent as string;\r\n                document.body.appendChild(temp);\r\n                temp.select();\r\n                document.execCommand(\"copy\");\r\n                temp.remove();\r\n                setShowCopy(true);\r\n              }\r\n            }}\r\n          >\r\n            <span id=\"access-code\" className=\"game-lobby-access-code\">\r\n              {accessCode}\r\n            </span>\r\n            <FontAwesomeIcon icon={faCopy} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"player-list-container\">\r\n        {Object.keys(users).map((key, index) => {\r\n          return (\r\n            <div className=\"player-list-cell\" key={key}>\r\n              <span className=\"player-list-cell-number\">{index + 1}</span>\r\n              {props.userID !== key && pRow(key)}\r\n              {props.userID === key && !isEditing && youRow}\r\n              {props.userID === key && isEditing && editRow}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"button-container\">\r\n        <button onClick={() => props.startGame(accessCode)}>Start Game</button>\r\n        <button onClick={() => props.leaveLobby()}>Leave Game</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameLobby;\r\n","import React, { useState } from \"react\";\r\n\r\ninterface JoinLobbyProps {\r\n  onSubmit(accessCode: string, desiredName: string): void;\r\n  requestBack(): void;\r\n}\r\n\r\nconst JoinLobby: React.FC<JoinLobbyProps> = props => {\r\n  const [accessCode, setAccessCode] = useState(\"\");\r\n  const [desiredName, setDesiredName] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className=\"title\">Welcome to Spyfall</div>\r\n      <div className=\"join-controls\">\r\n        <input\r\n          className=\"textfield\"\r\n          type=\"text\"\r\n          value={accessCode}\r\n          placeholder=\"Access code\"\r\n          onChange={e => setAccessCode(e.target.value)}\r\n        />\r\n        <input\r\n          className=\"textfield\"\r\n          type=\"text\"\r\n          value={desiredName}\r\n          placeholder=\"Your name\"\r\n          onChange={e => setDesiredName(e.target.value)}\r\n        />\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            marginTop: \"1rem\"\r\n          }}\r\n        >\r\n          <div className=\"button-container\">\r\n            <button onClick={() => props.onSubmit(accessCode, desiredName)}>\r\n              Join\r\n            </button>\r\n            <button onClick={() => props.requestBack()}>Back</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JoinLobby;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { SpyfallPayload } from \"../models/SpyfallPayload\";\r\nimport \"./SpyfallGame.css\";\r\n\r\ninterface SpyfallGameProps {\r\n  userID: string;\r\n  payload: SpyfallPayload;\r\n  handleEndGame(roomName: string): void;\r\n  handleLeaveGame(): void;\r\n}\r\n\r\nconst SpyfallGame: React.FC<SpyfallGameProps> = props => {\r\n  const payload = props.payload;\r\n  const users = props.payload.users;\r\n  const locations = payload.locations;\r\n  const location = payload.location;\r\n  const isSpy = props.userID === payload.spy;\r\n  const notSpy = props.userID !== payload.spy;\r\n  const timeBetween = Math.floor((payload.endTime - payload.startTime) / 1000);\r\n  const [time, setTime] = useState(timeBetween);\r\n  const [endGame, setEndGame] = useState(false);\r\n\r\n  //Timer\r\n  useEffect(() => {\r\n    let interval: any = null;\r\n    if (time <= 0) {\r\n      setEndGame(true);\r\n    } else if (!endGame && payload.inSession) {\r\n      interval = setInterval(() => {\r\n        setTime(time => time - 1);\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [payload.inSession, time]);\r\n\r\n  const minutesRem = Math.floor(time / 60);\r\n  const secondsRem = time % 60;\r\n  const formattedSeconds = secondsRem.toString().padStart(2, \"0\");\r\n\r\n  return (\r\n    <div className=\"spyfall-game-container\">\r\n      <div className=\"spyfallgame-timer\">\r\n        {minutesRem + \":\" + formattedSeconds}\r\n      </div>\r\n      <div className=\"spyfallgame-role-banner\">\r\n        {isSpy && <span>You are the spy!</span>}\r\n        {notSpy && (\r\n          <div className=\"agent-banner\">\r\n            <div>\r\n              You are <strong>not</strong> the spy!\r\n            </div>\r\n            <div className=\"agent-info\">\r\n              <div>The location: {location}</div>\r\n              <div>Your role: {payload.agents[props.userID]} </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"spyfallgame-info-container\">\r\n        <p>Players</p>\r\n        <div className=\"grid-container\">\r\n          {Object.keys(users).map((key, index) => {\r\n            const displayName = users[key];\r\n            return (\r\n              <div key={key} className=\"grid-item\">\r\n                <p>{displayName}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <p>Locations</p>\r\n        <div className=\"grid-container\">\r\n          {locations.map(location => {\r\n            const title = location[\"title\"];\r\n            return (\r\n              <div key={title} className=\"grid-item\">\r\n                <p>{title}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className=\"spyfallgame-controls\">\r\n        <div className=\"button-container\">\r\n          <button onClick={() => props.handleEndGame(payload.roomName)}>\r\n            End Game\r\n          </button>\r\n          <button onClick={props.handleLeaveGame}>Leave Game</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpyfallGame;\r\n","import React, { useState, useEffect, useContext } from \"react\";\nimport \"./Spyfall.css\";\nimport { SpyfallContext } from \"./SpyfallContext\";\nimport { GameState, Locations } from \"./constants\";\nimport { SpyfallPayload, getEmptyPayload } from \"./models/SpyfallPayload\";\nimport { createRoomConfig } from \"./models/SpyfallRoomConfig\";\nimport CreateControls from \"./components/CreateControls\";\nimport GameLobby from \"./components/GameLobby\";\nimport JoinLobby from \"./components/JoinLobby\";\nimport SpyfallGame from \"./components/SpyfallGame\";\n\nconst Spyfall: React.FC = () => {\n  const [gameState, setGameState] = useState(GameState.SPLASH);\n  const context = useContext(SpyfallContext);\n  const [gamePayload, setGamePayload] = useState<SpyfallPayload>(\n    getEmptyPayload()\n  );\n  const [userID, setUserID] = useState(\"\");\n\n  useEffect(() => {\n    context.init();\n\n    const awaitPayload = context.receivePayload();\n    awaitPayload.subscribe((payload: SpyfallPayload) => {\n      setUserID(context.getID());\n      setGamePayload(payload);\n      if (payload.inSession) {\n        setGameState(GameState.INGAME);\n      } else {\n        setGameState(GameState.LOBBY);\n      }\n    });\n\n    return function cleanup() {\n      context.disconnect();\n    };\n  }, []);\n\n  const controls = (\n    <>\n      <div className=\"title\">Welcome to Spyfall</div>\n      <div className=\"controls\">\n        <div className=\"button-container\">\n          <button\n            onClick={() => {\n              setGameState(GameState.CREATE);\n            }}\n          >\n            New Game\n          </button>\n          <button\n            onClick={() => {\n              setGameState(GameState.JOIN);\n            }}\n          >\n            Join Game\n          </button>\n        </div>\n      </div>\n    </>\n  );\n\n  const handleCreateSubmit = (\n    desiredName: string,\n    lState: Locations,\n    desiredDuration: number\n  ) => {\n    context.createRoom(createRoomConfig(desiredDuration, lState), desiredName);\n  };\n\n  const handleLeave = () => {\n    context.leave(gamePayload.roomName);\n    setGamePayload(getEmptyPayload());\n    setGameState(GameState.SPLASH);\n  };\n\n  const handleStartGame = (roomName: string) => {\n    context.startGame(roomName);\n  };\n\n  const handleEndGame = (roomName: string) => {\n    context.endGame(roomName);\n  };\n\n  const handleChangeName = (roomName: string, desiredName: string) => {\n    context.changeUsername(roomName, desiredName);\n  };\n\n  return (\n    <div className=\"spyfall-wrapper\">\n      <div className=\"spyfall\">\n        {gameState === GameState.SPLASH && controls}\n        {gameState === GameState.CREATE && (\n          <CreateControls\n            onGameStateChange={setGameState}\n            onSubmit={handleCreateSubmit}\n          />\n        )}\n        {gameState === GameState.JOIN && (\n          <JoinLobby\n            onSubmit={(accessCode: string, desiredName: string) => {\n              context.join(accessCode, desiredName);\n            }}\n            requestBack={() => setGameState(GameState.SPLASH)}\n          />\n        )}\n        {gameState === GameState.LOBBY && (\n          <GameLobby\n            userID={userID}\n            payload={gamePayload}\n            leaveLobby={handleLeave}\n            startGame={handleStartGame}\n            changeName={handleChangeName}\n          />\n        )}\n        {gameState === GameState.INGAME && (\n          <SpyfallGame\n            userID={userID}\n            payload={gamePayload}\n            handleEndGame={handleEndGame}\n            handleLeaveGame={handleLeave}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Spyfall;\n","export interface SpyfallPayload {\r\n  roomName: string;\r\n  roundDuration: number;\r\n  locations: any[];\r\n  users: Record<string, string>;\r\n  inSession: boolean;\r\n  location: string;\r\n  startTime: number;\r\n  endTime: number;\r\n  spy: string;\r\n  agents: Record<string, string>;\r\n}\r\n\r\nexport const getEmptyPayload = (): SpyfallPayload => {\r\n  return {\r\n    roomName: \"\",\r\n    roundDuration: 0,\r\n    locations: [],\r\n    users: {},\r\n    inSession: false,\r\n    location: \"\",\r\n    startTime: 0,\r\n    endTime: 0,\r\n    spy: \"\",\r\n    agents: {}\r\n  };\r\n};\r\n","import { Locations } from \"../constants\";\r\n\r\nexport interface SpyfallRoomConfig {\r\n  roundDuration: number;\r\n  locationType: Locations;\r\n}\r\n\r\nexport const createRoomConfig = (\r\n  roundDuration: number,\r\n  locationType: Locations\r\n): SpyfallRoomConfig => {\r\n  return {\r\n    roundDuration: roundDuration,\r\n    locationType: locationType\r\n  };\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Spyfall from \"./Spyfall\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { SocketService } from \"./SocketService\";\nimport { SpyfallContext } from \"./SpyfallContext\";\n\nconst game = new SocketService();\n\nReactDOM.render(\n  <SpyfallContext.Provider value={game}>\n    <Spyfall />\n  </SpyfallContext.Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}